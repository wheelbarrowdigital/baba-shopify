{% style %}
  section.relume-contact-030 {
    > .container {
      display: flex;
      flex-flow: column nowrap;
      gap: var(--spacing-9);

      @media (min-width: 1440px) {
        gap: var(--spacing-13);
      }
    }

    .content {
      display: flex;
      flex-flow: column nowrap;
      gap: var(--spacing-3);

      @media (min-width: 1440px) {
        gap: var(--spacing-4);
      }
    }

    .text {
      display: flex;
      flex-flow: column nowrap;
      gap: var(--spacing-5);
      max-width: 768px;

      @media (min-width: 1440px) {
        gap: var(--spacing-6);
      }
    }

    .grid {
      align-items: center;
      display: grid;
      gap: var(--spacing-9);
      grid-template-columns: 1fr;

      @media (min-width: 992px) {
        grid-template-columns: 40fr 60fr;
      }

      @media (min-width: 1440px) {
        gap: var(--spacing-13);
      }
    }

    .tabs {
      display: flex;
      flex-flow: column nowrap;
      gap: var(--spacing-8);
    }

    .tab {
      border-left: 2px solid transparent;
      display: flex;
      flex-flow: column nowrap;
      gap: var(--spacing-5);
      padding-left: var(--spacing-7);

      @media (min-width: 1440px) {
        gap: var(--spacing-6);
      }

      &.active {
        border-color: var(--gray-1000);
        cursor: default;
      }

      &.inactive {
        cursor: pointer;
        a {
          pointer-events: none;
        }
      }
    }

    .tab-text {
      display: flex;
      flex-flow: row wrap;
      gap: var(--spacing-3);

      @media (min-width: 1440px) {
        gap: var(--spacing-4);
      }

      p {
        flex-basis: 100%;
      }
    }
  }
{% endstyle %}

<div class="container container-lg {% unless request.design_mode %}reveal-from-bottom{% endunless %}">
  {% if section.settings.tagline != blank or section.settings.heading != blank or section.settings.paragraph != blank %}
    <div class="content">
      {% if section.settings.tagline != blank %}
        <span class="text-sm">{{ section.settings.tagline }}</span>
      {% endif %}
      {% if section.settings.heading != blank or section.settings.paragraph != blank %}
        <div class="text">
          {% if section.settings.heading != blank %}
            <h2 class="heading-5xl">{{ section.settings.heading }}</h2>
          {% endif %}
          {% if section.settings.paragraph != blank %}
            <p class="text-lg">{{ section.settings.paragraph }}</p>
          {% endif %}
        </div>
      {% endif %}
    </div>
  {% endif %}
  {% if section.blocks.size > 0 %}
    <div class="grid">
      <div class="tabs">
        {% assign index = 1 %}
        {% for block in section.blocks %}
          {% case block.type %}
            {% when 'tab' %}
              <div class="tab" data-index="{{ index }}" id="tab-{{ index }}">
                <div class="tab-text">
                  {% if block.settings.heading != blank %}
                    {% if block.settings.button_url != blank %}
                      <a class="heading-2xl" href="{{ block.settings.button_url }}">
                        {{ block.settings.heading }}
                      </a>
                    {% else %}
                      <h3 class="heading-2xl">{{ block.settings.heading }}</h3>
                    {% endif %}
                  {% endif %}
                  {% if block.settings.address != blank %}
                    <p class="text-sm">{{ block.settings.address }}</p>
                  {% endif %}
                  {% if block.settings.button_text != blank and block.settings.button_url != blank %}
                    {% render 'button',
                      text: block.settings.button_text,
                      text_size: 'sm',
                      url: block.settings.button_url,
                      style: 'link'
                    %}
                  {% endif %}
                </div>
              </div>
              {% assign index = index | plus: 1 %}
          {% endcase %}
        {% endfor %}
      </div>
      <div class="media">
        {% assign index = 1 %}
        {% for block in section.blocks %}
          {% case block.type %}
            {% when 'tab' %}
              {% if block.settings.image != blank %}
                {% assign image_id = 'tab-' | append: index | append: '-image' %}
                {% render 'image',
                  aspect_ratio: '8:5',
                  class: 'reveal',
                  focal_point: block.settings.image.presentation.focal_point,
                  id: image_id,
                  image: block.settings.image
                %}
              {% endif %}
              {% assign index = index | plus: 1 %}
          {% endcase %}
        {% endfor %}
      </div>
    </div>
  {% endif %}
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Get the tabs container
    const tabsContainer = document.querySelector('.tabs');
    // If the tabs container is not found, return
    if (!tabsContainer) return;

    // Get all the tabs
    const tabs = tabsContainer.querySelectorAll('.tab');
    // Get all the images
    const images = document.querySelectorAll('.media .image-wrapper');

    // Helper to show image for active tab
    const showImageForTab = (tabIndex) => {
      // Get the parent .image-wrapper divs and hide all
      images.forEach((wrapper) => {
        wrapper.style.display = 'none';
      });

      // Find and show the active image wrapper
      const activeImage = document.getElementById(`tab-${tabIndex}-image`);
      if (activeImage) {
        const activeWrapper = activeImage.closest('.image-wrapper');
        if (activeWrapper) {
          activeWrapper.style.display = 'block';
        }
      }
    };

    // Helper to handle tab activation
    const activateTab = (clickedTab) => {
      tabs.forEach((tab) => {
        if (tab !== clickedTab) {
          tab.classList.remove('active');
          tab.classList.add('inactive');
        }
      });
      clickedTab.classList.remove('inactive');
      clickedTab.classList.add('active');

      const tabIndex = clickedTab.dataset.index;
      showImageForTab(tabIndex);
    };

    // Set up initial state
    if (tabs.length > 0) {
      tabs.forEach((tab, index) => {
        if (index === 0) {
          activateTab(tab);
        } else {
          tab.classList.add('inactive');
        }
      });
    }

    // Handle click events
    tabsContainer.addEventListener('click', (e) => {
      const clickedTab = e.target.closest('.tab');
      if (!clickedTab) return;

      const isActive = clickedTab.classList.contains('active');
      const buttonUrl = clickedTab.getAttribute('href');

      if (isActive && buttonUrl) {
        // Let the natural link click happen
        return;
      }

      e.preventDefault();

      if (!isActive) {
        activateTab(clickedTab);
      }
    });
  });
</script>

{% schema %}
{
  "name": "Contact 030",
  "tag": "section",
  "class": "relume-contact-030",
  "blocks": [
    {
      "type": "tab",
      "name": "Tab",
      "limit": 3,
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "Image"
        },
        {
          "type": "inline_richtext",
          "id": "heading",
          "label": "Heading"
        },
        {
          "type": "inline_richtext",
          "id": "address",
          "label": "Address"
        },
        {
          "type": "text",
          "id": "button_text",
          "label": "Button Text"
        },
        {
          "type": "url",
          "id": "button_url",
          "label": "URL"
        }
      ]
    }
  ],
  "settings": [
    {
      "type": "text",
      "id": "tagline",
      "label": "Tagline"
    },
    {
      "type": "text",
      "id": "heading",
      "label": "Heading"
    },
    {
      "type": "text",
      "id": "paragraph",
      "label": "Paragraph"
    }
  ]
}
{% endschema %}
